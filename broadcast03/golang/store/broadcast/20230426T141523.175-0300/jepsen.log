2023-04-26 14:15:23,199{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 16d8edfad7fa9fe2a77b222c22b10b195885b3a8 (plus uncommitted changes)
2023-04-26 14:15:23,199{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin ./broadcast --node-count 1 --time-limit 20 --rate 10
2023-04-26 14:15:23,242{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x3b0471a5"
         "maelstrom.db$db$reify__16142@3b0471a5"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x7aac05e2" "2023-04-26T14:15:23.175-03:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x469caf69"
         "maelstrom.net$jepsen_net$reify__15251@469caf69"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__16644
         "0x5e05064b"
         "maelstrom.workload.broadcast$client$reify__16644@5e05064b"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x527e6bd3"
         "java.util.concurrent.CyclicBarrier@527e6bd3"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x4867e76b"
         "jepsen.checker$compose$reify__11881@4867e76b"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "./broadcast"
  "--node-count"
  "1"
  "--time-limit"
  "20"
  "--rate"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@6ba3eee9"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@1d628a88"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "./broadcast"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x40941b54"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@40941b54"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x3b42d7df"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@3b42d7df"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 200000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Mix
                                        {:i 1,
                                         :gens [({:f :broadcast, :value 0}
                                                 {:f :broadcast, :value 1}
                                                 {:f :broadcast, :value 2}
                                                 {:f :broadcast, :value 3}
                                                 {:f :broadcast, :value 4}
                                                 {:f :broadcast, :value 5}
                                                 {:f :broadcast, :value 6}
                                                 {:f :broadcast, :value 7}
                                                 ...)
                                                ({:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 ...)]})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x29cd48bd"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@29cd48bd"],
           :gen ()})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x49e3b86b"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@49e3b86b"],
           :gen (jepsen.generator.EachThread
                 {:fresh-gen {:f :read, :final? true},
                  :context-filters #object[clojure.core$promise$reify__8591
                                           "0x64b262a7"
                                           {:status :pending, :val nil}],
                  :gens {}})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x771c4015"
         "maelstrom.net$jepsen_os$reify__15254@771c4015"]
 :time-limit 20
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2023-04-26 14:15:24,152{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2023-04-26 14:15:24,153{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2023-04-26 14:15:24,154{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2023-04-26 14:15:24,156{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2023-04-26 14:15:24,157{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2023-04-26 14:15:24,157{GMT}	INFO	[jepsen node n0] maelstrom.process: launching ./broadcast []
2023-04-26 14:15:24,693{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2023-04-26 14:15:24,709{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2023-04-26 14:15:24,711{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[]
2023-04-26 14:15:24,834{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	0
2023-04-26 14:15:29,840{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:broadcast	0	:net-timeout
2023-04-26 14:15:29,841{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:read	nil
2023-04-26 14:15:34,844{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:fail	:read	nil	:net-timeout
2023-04-26 14:15:34,845{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:read	nil
2023-04-26 14:15:39,849{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:fail	:read	nil	:net-timeout
2023-04-26 14:15:39,849{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:read	nil
2023-04-26 14:15:44,855{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:fail	:read	nil	:net-timeout
2023-04-26 14:15:44,855{GMT}	INFO	[jepsen worker nemesis] jepsen.generator.interpreter: Waiting for recovery...
2023-04-26 14:15:54,861{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:read	nil
2023-04-26 14:15:59,862{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:fail	:read	nil	:net-timeout
2023-04-26 14:15:59,876{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2023-04-26 14:15:59,910{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2023-04-26 14:16:00,889{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2023-04-26 14:16:00,894{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n0 crashed with exit status 2. Before crashing, it wrote to STDOUT:

{"src":"n0","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
{"src":"n0","dest":"c1","body":{"in_reply_to":1,"msg_id":0,"type":"topology_ok"}}
{"src":"n0","dest":"c2","body":{"in_reply_to":1,"messages":[],"msg_id":1,"type":"read_ok"}}

And to STDERR:

2023/04/26 14:15:24 Received {c0 n0 {"type":"init","node_id":"n0","node_ids":["n0"],"msg_id":1}}
2023/04/26 14:15:24 Node n0 initialized
2023/04/26 14:15:24 Sent {"src":"n0","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
2023/04/26 14:15:24 Received {c1 n0 {"type":"topology","topology":{"n0":[]},"msg_id":1}}
2023/04/26 14:15:24 Sent {"src":"n0","dest":"c1","body":{"in_reply_to":1,"msg_id":0,"type":"topology_ok"}}
2023/04/26 14:15:24 Received {c2 n0 {"type":"read","msg_id":1}}
2023/04/26 14:15:24 Sent {"src":"n0","dest":"c2","body":{"in_reply_to":1,"messages":[],"msg_id":1,"type":"read_ok"}}
2023/04/26 14:15:24 Received {c2 n0 {"type":"broadcast","message":0,"msg_id":2}}
2023/04/26 14:15:24 Body = map[message:0 msg_id:2 type:broadcast]
panic: interface conversion: interface {} is float64, not int

goroutine 21 [running]:
main.main.func1({{0x140000ae330, 0x2}, {0x140000ae332, 0x2}, {0x140000d8030, 0x2b, 0x30}})
	/Users/lftm/Odin/Server/Glomers/broadcast03/golang/main.go:30 +0x244
github.com/jepsen-io/maelstrom/demo/go.(*Node).handleMessage(0x0?, 0x0?, {{0x140000ae330, 0x2}, {0x140000ae332, 0x2}, {0x140000d8030, 0x2b, 0x30}})
	/Users/lftm/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20230424133947-f6f4fd0d64fe/node.go:151 +0x6c
github.com/jepsen-io/maelstrom/demo/go.(*Node).Run.func2()
	/Users/lftm/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20230424133947-f6f4fd0d64fe/node.go:129 +0x78
created by github.com/jepsen-io/maelstrom/demo/go.(*Node).Run
	/Users/lftm/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20230424133947-f6f4fd0d64fe/node.go:127 +0x434

Full STDERR logs are available in /Users/lftm/Odin/Server/Glomers/broadcast03/golang/store/broadcast/20230426T141523.175-0300/node-logs/n0.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16142.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__8744$G__8725__8748.invoke(db.clj:12)
	at jepsen.db$fn__8744$G__8724__8753.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:833)
